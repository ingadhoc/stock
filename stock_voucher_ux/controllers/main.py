# Copyright 2017 ACSONE SA/NV
# Copyright 2018 - Brain-tec AG - Carlos Jesus Cebrian
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl)
import io
import json
import urllib.parse

from odoo.http import route, request
from odoo.addons.web.controllers import report
from PyPDF2 import PdfFileReader


class ReportController(report.ReportController):

    @route()
    def report_download(self, data, context=None):
        """This function is used by 'qwebactionmanager.js' in order to trigger
        the download of a py3o/controller report.
        :param data: a javascript array JSON.stringified containg report
        internal url ([0]) and type [1]
        :returns: Response with a filetoken cookie and an attachment header
        """
        response = super().report_download(data, context)
        #NTH detect if the binary is a PDF, no matter ifn it was generated by a QWeb or Aeroo
        requestcontent = json.loads(data)
        url, type = requestcontent[0], requestcontent[1]
        if type != 'aeroo':
            return response
        json_string = json.loads(data)[0]
        context_part = json_string.split('context=')[1]
        decoded_context = urllib.parse.unquote(context_part)
        context_dict = json.loads(decoded_context)
        store_pags_picking_id  = context_dict.get('active_id')
        assign  = context_dict.get('assign')
        book_id = request.env['stock.picking'].browse(store_pags_picking_id).book_id
        if assign and book_id:
            if store_pags_picking_id:
                pdf_response = response.response[0]
                reader = PdfFileReader(io.BytesIO(pdf_response))
                number_pages = reader.getNumPages()

            if not request.env['stock.picking'].browse(store_pags_picking_id).voucher_ids:
                request.env['stock.picking'].browse(store_pags_picking_id).assign_numbers(number_pages, book_id)

        return response
